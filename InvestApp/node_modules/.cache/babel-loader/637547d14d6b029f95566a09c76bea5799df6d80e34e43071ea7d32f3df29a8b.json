{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\achisriv\\\\OneDrive - Capgemini\\\\Documents\\\\React Course\\\\InvestApp\\\\src\\\\App.js\";\nimport logo from './assets/investment-calculator-logo.png';\nimport DispInvest from './Components/DispInvest';\nimport InvestForm from './Components/InvestForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const calculateHandler = () => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    // let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    // const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    // const expectedReturn = +userInput['expected-return'] / 100;\n    // const duration = +userInput['duration'];\n\n    //// // The below code calculates yearly results (total savings, interest etc)\n    // for (let i = 0; i < duration; i++) {\n    //   const yearlyInterest = currentSavings * expectedReturn;\n    //   currentSavings += yearlyInterest + yearlyContribution;\n    //   yearlyData.push({\n    //     // feel free to change the shape of the data pushed to the array!\n    //     year: i + 1,\n    //     yearlyInterest: yearlyInterest,\n    //     savingsEndOfYear: currentSavings,\n    //     yearlyContribution: yearlyContribution,\n    //   });\n    // }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Investment Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","DispInvest","InvestForm","jsxDEV","_jsxDEV","App","calculateHandler","yearlyData","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/achisriv/OneDrive - Capgemini/Documents/React Course/InvestApp/src/App.js"],"sourcesContent":["import logo from './assets/investment-calculator-logo.png';\nimport DispInvest from './Components/DispInvest';\nimport InvestForm from './Components/InvestForm';\n\n\nfunction App() {\n  const calculateHandler = () => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    // let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    // const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    // const expectedReturn = +userInput['expected-return'] / 100;\n    // const duration = +userInput['duration'];\n\n   //// // The below code calculates yearly results (total savings, interest etc)\n    // for (let i = 0; i < duration; i++) {\n    //   const yearlyInterest = currentSavings * expectedReturn;\n    //   currentSavings += yearlyInterest + yearlyContribution;\n    //   yearlyData.push({\n    //     // feel free to change the shape of the data pushed to the array!\n    //     year: i + 1,\n    //     yearlyInterest: yearlyInterest,\n    //     savingsEndOfYear: currentSavings,\n    //     yearlyContribution: yearlyContribution,\n    //   });\n    // }\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <header className=\"header\">\n        <img src={logo} alt=\"logo\" />\n        <h1>Investment Calculator</h1>\n      </header>\n\n    {/* <InvestForm formInputs={calculateHandler}/> */}\n\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      {/* <DispInvest invest={object} /> */}\n\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjD,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB;IACA;IACA;IACA;;IAED;IACC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;EACF,CAAC;;EAED,oBACEH,OAAA;IAAAI,QAAA,eACEJ,OAAA;MAAQK,SAAS,EAAC,QAAQ;MAAAD,QAAA,gBACxBJ,OAAA;QAAKM,GAAG,EAAEV,IAAK;QAACW,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7BX,OAAA;QAAAI,QAAA,EAAI;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAWN,CAAC;AAEV;AAACC,EAAA,GA9CQX,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}